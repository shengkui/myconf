"Turn off vi-compatible mode
set nocompatible

set fileencoding=utf-8
set encoding=utf-8

if v:version >= 800
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Plugin manager
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

if !has("compatible")
"filetype off
"Specify a directory for plugins
call plug#begin('~/.vim/plugged')
Plug 'prabirshrestha/asyncomplete.vim'  "Async autocompletion
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'           "Language Server Protocol
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'tpope/vim-endwise'                "End certain structures automatically(C preprocessor...)
Plug 'SirVer/ultisnips'                 "Code snippet
Plug 'honza/vim-snippets'               "Code snippet
Plug 'jsfaint/gen_tags.vim'             "Generate and load tags
Plug 'majutsushi/tagbar'                "Browse the tags
Plug 'buoto/gotests-vim', { 'for': 'go' } "Generate table driven tests easily
Plug 'mattn/vim-goimports'              "Run goimports

Plug 'editorconfig/editorconfig-vim'    "EditorConfig
Plug 'embear/vim-foldsearch'            "Fold away lines that don't match a search pattern

Plug 'rhysd/committia.vim'              "Improve for Git commit message editor
Plug 'tpope/vim-fugitive'               "Git Wrapper
Plug 'mhinz/vim-signify'                "Show a diff using Vim its sign column.
Plug 'hotwatermorning/auto-git-diff'    "Show git diff for 'git rebase -i'

Plug 'dkprice/vim-easygrep'             "Find and replace across multiple files
Plug 'tpope/vim-surround'               "Easily add, delete and change parentheses/brackets/quotes
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

Plug 'will133/vim-dirdiff', { 'on': 'DirDiff' }     "Diff two directories
Plug 'chrisbra/vim-diff-enhanced'       "Better Diff

Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }  "Undo history visualizer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }  "File explorer
Plug 'EinfachToll/DidYouMean'           "Ask for the right file to open
Plug 'ConradIrwin/vim-bracketed-paste'  "Paste mode(automatic `:set paste`)

Plug 'itchyny/lightline.vim'            "Statusline/tabline
Plug 'rakr/vim-one'                     "Color scheme

call plug#end()
"filetype plugin indent on
endif

endif "v:version >= 800


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Man
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
runtime ftplugin/man.vim


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Color
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable

if $TERM == "linux"
    set t_Co=256
    set term=xterm-256color
    colorscheme default
else
    set termguicolors
    colorscheme one
endif
set background=light
hi SpellBad cterm=underline

"Toggle color scheme
function! g:ToggleBackground()
    if &background != 'dark'
        set background=dark
        colorscheme torte
    else
        set background=light
        colorscheme default
    endif
endfunction
nmap <silent> <F6> :call g:ToggleBackground()<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"GVIM only
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("gui_running")
    set mouse=a                 "Use mouse everywhere
    "set guifont=monospace\ 14   "Set font of GVIM
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 14
    "set cursorline             "Highlight current line
    "set cursorcolumn           "Highlight current column
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50          "Keep 50 lines of command line history
set nobackup            "No backup file

set number              "Turn on line numbers
set ruler               "Show current positions at the bottom

set incsearch           "Do incremental searching
set hlsearch            "Highlight search strings
set showmatch           "Show matching brackets

set showcmd             "Show the command being typed
set showmode            "Show mode of Insert/Replace/Visual mode
set linebreak           "Wrap long lines at a blank
set noerrorbells        "No beep on errors
set wildignore=*.o,*~

set title

"Set command-line completion operates in enhanced mode
set wildmode=list:full
set wildmenu

"Jump to line when reopen a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline=[%F][%{&ff}]%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
set laststatus=2            "Always show the status line

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Leader key
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:mapleader = ","

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"TAB
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=4           "Number of spaces that a <Tab> counts for.
set softtabstop=4       "Number of spaces that a <Tab> counts for while editing.
set shiftwidth=4        "Number of spaces to be used for each step of (auto)indent.
set smarttab            "When hitting <Tab> or <Backspace> in front of line, 'shiftwidth' used.
"set expandtab           "No real tabs(insert spaces when <Tab> pressed).
set autoindent

"Set expandtab for some filetype
autocmd FileType make setlocal noexpandtab
autocmd FileType vim setlocal expandtab
autocmd BufRead,BufNewFile *.log  set filetype=text
autocmd FileType text setlocal expandtab

"C/C++: Highlight trailling space
"let c_space_errors = 1

"Show special chars
set listchars=tab:\|\ ,nbsp:~,extends:>,precedes:<,trail:-
set list

"Show line margin in color
set colorcolumn=100

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"paste mode
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set pastetoggle=<F2>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F3> :NERDTreeToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"tabpage
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:map <F4> :tabnew<CR>
:map <F5> :tabnext<CR>
:imap <F4> <ESC>:tabnew<CR>i
:imap <F5> <ESC>:tabnext<CR>i

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"persistent-undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if v:version >= 703
    set undofile                    "Save undos after file closed
    set undodir=$HOME/.vim/undo     "Where to save undo histories
    "set undolevels=1000            "How many undos
    "set undoreload=10000           "Number of lines to save for undo

    "undotree
    nmap <F7> :UndotreeToggle<CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Tagbar
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F8> :TagbarToggle<CR>
let g:tagbar_sort = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"ultisnips
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"let g:UltiSnipsSnippetDirectories=["UltiSnips"]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"EasyGrep
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let EasyGrepMode = 0
let EasyGrepRecursive = 1
let EasyGrepIgnoreCase = 1
let EasyGrepReplaceWindowMode = 2
let EasyGrepJumpToMatch = 0
let g:EasyGrepFilesToExclude = "GPATH,GRTAGS,GTAGS,tags,.svn,.git"
"let EasyGrepWindowPosition = "botright"

if executable('ag')
    set grepprg=ag
    let EasyGrepCommand = 1
elseif executable('grep')
    set grepprg=grep
    let EasyGrepCommand = 1
else
    set grepprg=''
    let EasyGrepCommand = 0
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"gen_tags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Map <Ctrl>+<F12> to generate tags
nmap <C-F12> :GenCtags<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"markdown
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"preview
nmap <leader>m :!markdown % \| lynx -stdin <CR><CR>
"nmap <leader>m :!markdown % \| w3m -T text/html<CR><CR>


if v:version >= 800

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"editorconfig
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! LightlineLSPWarnings() abort
    let l:counts = lsp#ui#vim#diagnostics#get_buffer_diagnostics_counts()
    return l:counts.warning == 0 ? '' : printf('W:%d', l:counts.warning)
endfunction

function! LightlineLSPErrors() abort
    let l:counts = lsp#ui#vim#diagnostics#get_buffer_diagnostics_counts()
    return l:counts.error == 0 ? '' : printf('E:%d', l:counts.error)
endfunction

function! LightlineLSPOk() abort
    let l:counts =  lsp#ui#vim#diagnostics#get_buffer_diagnostics_counts()
    let l:total = l:counts.error + l:counts.warning
    return l:total == 0 ? 'OK' : ''
endfunction

augroup LightLineOnLSP
    autocmd!
    autocmd User lsp_diagnostics_updated call lightline#update()
augroup END

let g:lightline = {
      \ 'colorscheme': 'OldHope',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'readonly', 'filename', 'modified' ],
      \   ],
      \   'right': [
      \     [ 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
      \     [ 'percent' ], [ 'lineinfo' ],
      \     [ 'fileformat', 'fileencoding', 'filetype' ],
      \   ],
      \ },
      \ 'component_expand': {
      \   'lsp_warnings': 'LightlineLSPWarnings',
      \   'lsp_errors':   'LightlineLSPErrors',
      \   'lsp_ok':       'LightlineLSPOk',
      \ },
      \ 'component_type': {
      \   'lsp_warnings': 'warning',
      \   'lsp_errors':   'error',
      \   'lsp_ok':       'middle',
      \ },
    \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vim-lsp
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimlsp
    if executable('clangd')
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'whitelist': ['c', 'cpp'],
            \ })
        autocmd FileType c,cpp setlocal omnifunc=lsp#complete
    endif

    if executable('gopls')
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'gopls',
            \ 'cmd': {server_info->['gopls']},
            \ 'whitelist': ['go'],
            \ })
        autocmd FileType go setlocal omnifunc=lsp#complete
    endif

    if executable('bash-language-server')
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'bash-language-server',
            \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
            \ 'whitelist': ['sh'],
            \ })
        autocmd FileType sh setlocal omnifunc=lsp#complete
    endif

    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_float_cursor = 1
    let g:lsp_signs_enabled = 1             " enable signs
    let g:lsp_diagnostics_echo_cursor = 1   " enable echo under cursor when in normal mode

    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> <leader>p <Plug>(lsp-previous-diagnostic)
    nmap <buffer> <leader>n <Plug>(lsp-next-diagnostic)
augroup end

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"gotests
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType go nmap <leader>t :GoTests<cr>
autocmd FileType go nmap <leader>ta :GoTestsAll<cr>

endif "v:version >= 800

"Key mapping for remove trailling space
nmap <leader>l :%s/\s*$//g<CR>:noh<CR>

"Switch CWD to the directory of the open buffer
nmap <leader>cd :cd %:p:h<cr>:pwd<cr>

"Reload vimrc
nmap <leader>cr :source $MYVIMRC<CR>:nohlsearch<CR>
